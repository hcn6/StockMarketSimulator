[{"C:\\Users\\hieun\\stock-app\\frontend\\src\\index.js":"1","C:\\Users\\hieun\\stock-app\\frontend\\src\\App.js":"2","C:\\Users\\hieun\\stock-app\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\Layout.jsx":"4","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\StockDisplay.jsx":"5","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\Progress.jsx":"6","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\BuyInputForm.jsx":"7","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\SellInputForm.jsx":"8","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\Investing.jsx":"9","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\DepositForm.jsx":"10","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\WithdrawalForm.jsx":"11"},{"size":621,"mtime":1611254472687,"results":"12","hashOfConfig":"13"},{"size":1663,"mtime":1611300756430,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":10161,"mtime":1611684525700,"results":"16","hashOfConfig":"13"},{"size":6679,"mtime":1611661345166,"results":"17","hashOfConfig":"13"},{"size":3178,"mtime":1611299925230,"results":"18","hashOfConfig":"13"},{"size":3719,"mtime":1611676790478,"results":"19","hashOfConfig":"13"},{"size":2989,"mtime":1611676814426,"results":"20","hashOfConfig":"13"},{"size":4652,"mtime":1611661122903,"results":"21","hashOfConfig":"13"},{"size":1733,"mtime":1611653178127,"results":"22","hashOfConfig":"13"},{"size":1781,"mtime":1611653241224,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"1izxl6t",{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"27"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"27"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"27"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"27"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"27"},"C:\\Users\\hieun\\stock-app\\frontend\\src\\index.js",["54","55","56","57"],"import React, { useContext } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux';\nimport axios from 'axios';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["58","59"],"C:\\Users\\hieun\\stock-app\\frontend\\src\\App.js",["60","61","62","63"],"\nimport './App.css';\nimport Layout from './Components/Layout';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport io from 'socket.io-client';\nimport Progress from './Components/Progress';\n// export const TransactionContext = React.createContext();\n// export const StockPriceContext = React.createContext();\n\nconst App = () => {\n  // const [transaction, setTransaction] = useState({});\n  // const [currentPrice, setCurrentPrice] = useState({});\n  // const [newData, setNewData] = useState(false)\n  // useEffect(() => {\n  //   const fetchData1 = async () => {\n  //     const response1 = await axios.get('http://localhost:8080/allTransactions')\n  //     const response2 = await axios.get('http://localhost:8080/allStockPrice')\n  //     setCurrentPrice(response2.data);\n  //     setTransaction(response1.data);\n  //   }\n  //   fetchData1();\n  // }, [newData])\n\n  // useEffect(() => {\n  //   const socket = io.connect(\"http://localhost:8080\");\n  //   socket.on(\"change-type\", async (data) => {\n  //     const [key, value] = Object.entries(data)[0]\n  //     setCurrentPrice((currentPrice) => {\n  //       return { ...currentPrice, [key]: value }\n  //     })\n  //   })\n  // }, [])\n\n  return (\n    <div>\n      {/* {console.log(currentPrice)} */}\n      {/* <StockPriceContext.Provider value={{ currentPrice, setCurrentPrice }}>\n        <TransactionContext.Provider value={{ transaction, setNewData }}> */}\n      <h1 align=\"center\">Stock Market</h1>\n      <Progress>\n      </Progress>\n\n      <Layout>\n\n      </Layout>\n      {/* </TransactionContext.Provider>\n      </StockPriceContext.Provider> */}\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\hieun\\stock-app\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\Layout.jsx",["64","65","66","67"],"C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\StockDisplay.jsx",["68","69","70"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { TransactionContext, StockPriceContext } from './Layout'\r\n// const _ = require('lodash')\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.primary.light,\r\n        color: theme.palette.common.black,\r\n        borderWidth: 1,\r\n        borderColor: 'black',\r\n        borderStyle: 'solid',\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\n\r\n\r\nfunction createTransaction(shares, price, total, current) {\r\n    return { shares, price, total, current };\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 500,\r\n        marginLeft: 30,\r\n    },\r\n    tableRightBorder: {\r\n        borderWidth: 1,\r\n        borderColor: 'black',\r\n        borderStyle: 'solid',\r\n    },\r\n});\r\n\r\n\r\nconst StockDisplay = (props) => {\r\n    const classes = useStyles();\r\n    const transactions = useContext(TransactionContext).transaction;\r\n    const updatedPrice = useContext(StockPriceContext).currentPrice;\r\n\r\n    return (\r\n        <TableContainer border={1} component={Paper}>\r\n            <Table aria-label=\"customized table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Stock Name</StyledTableCell>\r\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Shares</StyledTableCell>\r\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Equity</StyledTableCell>\r\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Total Return</StyledTableCell>\r\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Current Price</StyledTableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {Object.keys(transactions).reduce((result, row) => {\r\n                        let currentRowPrice = (updatedPrice[row])\r\n                        let shares = '0';\r\n                        let equity = '0';\r\n                        let totalReturn = '0'\r\n                        shares = (parseFloat(transactions[row][\"shares\"]).toLocaleString('en-US', { maximumFractionDigits: 7 }));\r\n                        if (shares !== undefined && currentRowPrice !== undefined) {\r\n                            equity = `$ ${(parseFloat(shares.replace(',', '')).toFixed(6) * parseFloat(currentRowPrice.replace(',', ''))).toLocaleString()}`;\r\n                        }\r\n                        totalReturn = parseFloat(parseFloat(equity.replace('$', '').replace(',', '')) - parseFloat(transactions[row][\"total\"])).toFixed(3)\r\n                        result.push(<StyledTableRow>\r\n                            <StyledTableCell className={classes.tableRightBorder} component=\"th\" scope=\"row\" align=\"center\">\r\n                                {row}\r\n                            </StyledTableCell>\r\n                            <StyledTableCell className={classes.tableRightBorder} align=\"center\">{shares}</StyledTableCell>\r\n                            <StyledTableCell className={classes.tableRightBorder} align=\"center\">{equity}</StyledTableCell>\r\n                            <StyledTableCell className={classes.tableRightBorder} align=\"center\">{totalReturn}</StyledTableCell>\r\n                            <StyledTableCell className={classes.tableRightBorder} align=\"center\">{currentRowPrice}</StyledTableCell>\r\n                        </StyledTableRow>)\r\n                        return result\r\n                    }, [])}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\nexport default StockDisplay;\r\n// useEffect(() => {\r\n    //     // if (Object.keys(transactions).length !== 0) {\r\n    //     //     const stockList = transactions.map(row => row[\"Stock Name\"]);\r\n    //     //     let stockMap = {}\r\n    //     //     transactions.forEach((stock, i) => {\r\n    //     //         const names = stock[\"Stock Name\"]\r\n    //     //         stockMap = { ...stockMap, [names]: createTransaction(stock[\"Shares\"], stock[\"Price\"], stock[\"Total\"], 0) }\r\n    //     //     })\r\n    //     //     setStockDict(stockMap);\r\n    //     //     setRows(stockList);\r\n    //     // }\r\n    //     setStockDict(transactions)\r\n    //     setCurrentPrice(updatedPrice)\r\n    // }, [transactions, updatedPrice])\r\n\r\n    // setStockDict(transactions)\r\n    // useEffect(() => {\r\n    //     const fetchData = async () => {\r\n    //         const stockPrice = await axios.get('http://localhost:8080/allStockPrice');\r\n    //         setCurrentPrice(stockPrice.data);\r\n    //         const transactions = await axios.get('http://localhost:8080/allTransactions');\r\n    //         const stockList = transactions.data.map(row => row[\"Stock Name\"]);\r\n    //             let stockMap = {}\r\n    //             for (var i = 0; i < transactions.data.length; i++) {\r\n    //                 const stock = transactions.data;\r\n    //                 const names = stock[i][\"Stock Name\"]\r\n    //                 stockMap = { ...stockMap, [names]: createTransaction(stock[i][\"Shares\"], stock[i][\"Price\"], stock[i][\"Total\"], 0) }\r\n    //             }\r\n    //             setStockDict(stockMap);\r\n    //             setRows(stockList);\r\n    //     }\r\n    //     fetchData();\r\n    // }, [props.newStock])\r\n\r\n    // useEffect(() => {\r\n    //     let stockList = rows;\r\n    //     stockList = rows.filter((item) => {\r\n    //         return item !== props.deleteStock[\"Stock Name\"]\r\n    //     })\r\n    //     setRows(stockList)\r\n    // }, [props.deleteStock])\r\n\r\n    // useEffect(() => {\r\n    //     const socket = io.connect(\"http://localhost:8080\");\r\n    //     socket.on(\"change-type\", async (data) => {\r\n    //         const [key, value] = Object.entries(data)[0]\r\n    //         setCurrentPrice((currentPrice) => {\r\n    //             return { ...currentPrice, [key]: value }\r\n    //         })\r\n    //     })\r\n    // }, [])","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\Progress.jsx",["71","72","73","74"],"import { Chart } from 'chart.js';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Investing from './Investing';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    investing: {\r\n        marginLeft: theme.spacing(10)\r\n    }\r\n}));\r\nconst Progress = () => {\r\n    const [stockPrice, setStockPrice] = useState([]);\r\n    const [stockInterval, setStockInterval] = useState([]);\r\n    const classes = useStyles()\r\n    useEffect(() => {\r\n        fetchStock()\r\n    }, []);\r\n\r\n\r\n    const fetchStock = () => {\r\n        const API_KEY = 'DG4BRBSVFRTU4V67';\r\n        let StockSymbol = 'BTC';\r\n        let API_Call = `https://www.alphavantage.co/query?function=DIGITAL_CURRENCY_DAILY&symbol=BTC&market=USD&apikey=${API_KEY}`\r\n        let stockPricee = [];\r\n        let stockIntervall = [];\r\n\r\n        fetch(API_Call)\r\n            .then(\r\n                function (response) {\r\n                    return response.json();\r\n                }\r\n            )\r\n            .then(\r\n                function (data) {\r\n                    console.log(data);\r\n\r\n                    for (var key in data['Time Series (Digital Currency Daily)']) {\r\n                        stockIntervall.push(key);\r\n                        stockPricee.push(data['Time Series (Digital Currency Daily)'][key]['1a. open (USD)']);\r\n                    }\r\n                    setStockPrice(stockPricee.reverse())\r\n                    setStockInterval(stockIntervall.reverse())\r\n                }\r\n            )\r\n    }\r\n\r\n    useEffect(() => {\r\n        const ctx = document.getElementById(\"stockChart\");\r\n        new Chart(ctx, {\r\n            type: \"line\",\r\n            data: {\r\n                labels: stockInterval,\r\n                datasets: [\r\n                    {\r\n                        fill: false,\r\n                        label: \"BTC\",\r\n                        lineTension: 0.2,\r\n                        backgroundColor: 'rgba(75,192,192,0.4)',\r\n                        borderColor: 'rgba(75,192,192,1)',\r\n                        borderCapStyle: 'butt',\r\n                        borderDash: [],\r\n                        borderDashOffset: 0.0,\r\n                        borderJoinStyle: 'miter',\r\n                        pointBorderColor: 'rgba(75,192,192,1)',\r\n                        pointBackgroundColor: '#fff',\r\n                        pointBorderWidth: 1,\r\n                        pointHoverRadius: 5,\r\n                        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n                        pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n                        pointHoverBorderWidth: 2,\r\n                        pointRadius: 1,\r\n                        pointHitRadius: 10,\r\n                        data: stockPrice,\r\n                    }\r\n                ]\r\n            }\r\n        });\r\n    });\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div>\r\n                \r\n\r\n                <div className=\"Progress\">\r\n                    <canvas id=\"stockChart\" width={document.body.clientWidth} height=\"450\" />\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default Progress;","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\BuyInputForm.jsx",["75","76"],"C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\SellInputForm.jsx",["77","78"],"C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\Investing.jsx",["79","80","81","82","83","84"],"import { Typography } from '@material-ui/core';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { TransactionContext, StockPriceContext, DepositContext } from './Layout'\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport axios from 'axios';\r\nimport TablePaginationActions from '@material-ui/core/TablePagination/TablePaginationActions';\r\nconst useStyles = makeStyles(theme => ({\r\n    numberDisplay: {\r\n        marginRight: theme.spacing(10)\r\n    },\r\n    direction: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        marginBottom: theme.spacing(5)\r\n    }\r\n}));\r\nconst Investing = (props) => {\r\n    const transactions = useContext(TransactionContext).transaction;\r\n    const updatedPrice = useContext(StockPriceContext).currentPrice;\r\n    const buyPower = useContext(DepositContext).buyPower\r\n    const deposit = useContext(DepositContext).deposit\r\n    const totalReturn = () => {\r\n        return Object.keys(transactions).reduce((result, row) => {\r\n            let currentRowPrice = (updatedPrice[row])\r\n            let shares = '0';\r\n            let equity = '0';\r\n            let totalReturn = '0';\r\n            shares = (parseFloat(transactions[row][\"shares\"]).toLocaleString('en-US', { maximumFractionDigits: 7 }));\r\n            if (shares !== undefined && currentRowPrice !== undefined) {\r\n                equity = `$ ${(parseFloat(shares.replace(',', '')).toFixed(6) * parseFloat(currentRowPrice.replace(',', ''))).toLocaleString()}`;\r\n            }\r\n            totalReturn = parseFloat(parseFloat(equity.replace('$', '').replace(',', '')) - parseFloat(transactions[row][\"total\"])).toFixed(3)\r\n            result += parseFloat(totalReturn);\r\n            return result;\r\n        }, 0)\r\n    }\r\n    const totalStockInitial = () => {\r\n        return Object.keys(transactions).reduce((result, row) => {\r\n            result += parseFloat(transactions[row][\"total\"])\r\n            return result;\r\n        }, 0)\r\n    }\r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <div className={classes.direction}>\r\n                <div className={classes.numberDisplay}>\r\n                    <Typography align=\"left\" variant=\"h2\" gutterBottom>\r\n                        Investing\r\n                    </Typography>\r\n                    <Typography align=\"left\" variant=\"h2\" gutterBottom>\r\n                        {buyPower + totalStockInitial() + totalReturn()}\r\n                    </Typography>\r\n                </div>\r\n                <div>\r\n                    <Typography align=\"left\" variant=\"h2\" gutterBottom>\r\n                        Buying Power\r\n                    </Typography>\r\n                    <Typography align=\"left\" variant=\"h2\" gutterBottom>\r\n                        {buyPower}\r\n                    </Typography>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default Investing;\r\n// useEffect(() => {\r\n    //     const total = () => {\r\n    //         let sum = 0;\r\n    //         if (Object.keys(transactions).length !== 0 && Object.keys(updatedPrice).length !== 0) {\r\n    //             transactions.forEach((stock, i) => {\r\n    //                 sum += parseFloat(updatedPrice[stock[\"Stock Name\"]].replace(',', '')) * parseFloat(stock[\"Shares\"])\r\n    //             })\r\n    //             return sum.toFixed(3) + totalDeposit;\r\n    //         }\r\n    //         else {\r\n    //             return sum + totalDeposit;\r\n    //         }\r\n    //     }\r\n    //     setInvesting(total)\r\n    // }, [])\r\n    // const investing = () => {\r\n    //     let sum = 0;\r\n    //     if (Object.keys(transactions).length !== 0 && Object.keys(updatedPrice).length !== 0) {\r\n    //         transactions.forEach((stock, i) => {\r\n    //             sum += parseFloat(updatedPrice[stock[\"Stock Name\"]].replace(',', '')) * parseFloat(stock[\"Shares\"])\r\n    //             // console.log((updatedPrice[stock[\"Stock Name\"]].replace(',', '')) * parseFloat(stock[\"Shares\"]))\r\n    //         })\r\n    //         return sum.toFixed(3);\r\n    //     }\r\n    //     else {\r\n    //         return sum;\r\n    //     }\r\n    // }\r\n\r\n\r\n    // useEffect(() => {\r\n    //     setTotalDeposit(totalDeposit => {\r\n    //         const data = props.newDeposit;\r\n    //         return totalDeposit + parseFloat(data[\"amount\"])\r\n    //     })\r\n    //     const data = {\r\n    //         \"amount\": totalDeposit,\r\n    //         \"date\": Date.now()\r\n    //     }\r\n    //     const sendData = async () => {\r\n    //         await axios.post('http://localhost:8080/deposit', data)\r\n    //     }\r\n    //     sendData()\r\n    // }, [props.newDeposit])","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\DepositForm.jsx",["85","86","87","88"],"import React, { useState, useEffect, useContext } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { TransactionContext, StockPriceContext, DepositContext } from './Layout'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n}));\r\n\r\nconst DepositForm = (props) => {\r\n    const classes = useStyles();\r\n    const [deposit, setDeposit] = useState('');\r\n    const newDeposit = useContext(DepositContext).handleDepositChange\r\n    const newBuyPower = useContext(DepositContext).handleBuyPowerChange\r\n    const handleDepositChange = e => setDeposit(e.target.value);\r\n    const handleSubmit = async e => {\r\n        e.preventDefault()\r\n        const data = {\r\n            \"amount\": deposit,\r\n            \"date\": Date.now()\r\n        }\r\n        setDeposit('')\r\n        newDeposit(data)\r\n        newBuyPower(data)\r\n    }\r\n    return (\r\n        <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n            <FormControl>\r\n                <InputLabel> Amount</InputLabel>\r\n                <Input id=\"outlined-basic\" onChange={handleDepositChange} value={deposit} />\r\n            </FormControl>\r\n            <Button type='submit' variant=\"contained\" color=\"primary\" onSubmit={handleSubmit}>\r\n                Submit\r\n            </Button>\r\n        </form>\r\n    );\r\n}\r\nexport default DepositForm","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\WithdrawalForm.jsx",["89","90","91","92","93"],"import React, { useState, useEffect, useContext } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport axios from 'axios';\r\nimport { TransactionContext, StockPriceContext, DepositContext } from './Layout'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n}));\r\n\r\n\r\nconst WithdrawalForm = (props) => {\r\n    const classes = useStyles();\r\n    const [deposit, setDeposit] = useState('');\r\n    const newDeposit = useContext(DepositContext).handleDepositChange\r\n    const newBuyPower = useContext(DepositContext).handleBuyPowerChange\r\n    const handleDepositChange = e => setDeposit(e.target.value);\r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault()\r\n        const data = {\r\n            \"amount\": -deposit,\r\n            \"date\": Date.now()\r\n        }\r\n        setDeposit('');\r\n        newDeposit(data);\r\n        newBuyPower(data);     \r\n    }\r\n    return (\r\n        <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n            <FormControl>\r\n                <InputLabel> Amount</InputLabel>\r\n                <Input id=\"outlined-basic\" onChange={handleDepositChange} value={deposit} />\r\n            </FormControl>\r\n            <Button type='submit' variant=\"contained\" color=\"primary\" onSubmit={handleSubmit}>\r\n                Submit\r\n            </Button>\r\n        </form>\r\n    );\r\n}\r\nexport default WithdrawalForm;",{"ruleId":"94","severity":1,"message":"95","line":1,"column":17,"nodeType":"96","messageId":"97","endLine":1,"endColumn":27},{"ruleId":"94","severity":1,"message":"98","line":6,"column":10,"nodeType":"96","messageId":"97","endLine":6,"endColumn":18},{"ruleId":"94","severity":1,"message":"99","line":7,"column":10,"nodeType":"96","messageId":"97","endLine":7,"endColumn":21},{"ruleId":"94","severity":1,"message":"100","line":8,"column":8,"nodeType":"96","messageId":"97","endLine":8,"endColumn":13},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"94","severity":1,"message":"105","line":4,"column":17,"nodeType":"96","messageId":"97","endLine":4,"endColumn":25},{"ruleId":"94","severity":1,"message":"106","line":4,"column":27,"nodeType":"96","messageId":"97","endLine":4,"endColumn":36},{"ruleId":"94","severity":1,"message":"100","line":5,"column":8,"nodeType":"96","messageId":"97","endLine":5,"endColumn":13},{"ruleId":"94","severity":1,"message":"107","line":6,"column":8,"nodeType":"96","messageId":"97","endLine":6,"endColumn":10},{"ruleId":"94","severity":1,"message":"108","line":5,"column":10,"nodeType":"96","messageId":"97","endLine":5,"endColumn":20},{"ruleId":"94","severity":1,"message":"109","line":54,"column":7,"nodeType":"96","messageId":"97","endLine":54,"endColumn":17},{"ruleId":"94","severity":1,"message":"110","line":124,"column":23,"nodeType":"96","messageId":"97","endLine":124,"endColumn":32},{"ruleId":"111","severity":1,"message":"112","line":208,"column":8,"nodeType":"113","endLine":208,"endColumn":29,"suggestions":"114"},{"ruleId":"94","severity":1,"message":"105","line":1,"column":17,"nodeType":"96","messageId":"97","endLine":1,"endColumn":25},{"ruleId":"94","severity":1,"message":"106","line":1,"column":27,"nodeType":"96","messageId":"97","endLine":1,"endColumn":36},{"ruleId":"94","severity":1,"message":"115","line":35,"column":10,"nodeType":"96","messageId":"97","endLine":35,"endColumn":27},{"ruleId":"94","severity":1,"message":"116","line":3,"column":8,"nodeType":"96","messageId":"97","endLine":3,"endColumn":17},{"ruleId":"94","severity":1,"message":"108","line":4,"column":10,"nodeType":"96","messageId":"97","endLine":4,"endColumn":20},{"ruleId":"94","severity":1,"message":"117","line":14,"column":11,"nodeType":"96","messageId":"97","endLine":14,"endColumn":18},{"ruleId":"94","severity":1,"message":"118","line":22,"column":13,"nodeType":"96","messageId":"97","endLine":22,"endColumn":24},{"ruleId":"94","severity":1,"message":"119","line":11,"column":30,"nodeType":"96","messageId":"97","endLine":11,"endColumn":47},{"ruleId":"111","severity":1,"message":"120","line":69,"column":8,"nodeType":"113","endLine":69,"endColumn":23,"suggestions":"121"},{"ruleId":"94","severity":1,"message":"106","line":1,"column":27,"nodeType":"96","messageId":"97","endLine":1,"endColumn":36},{"ruleId":"94","severity":1,"message":"119","line":10,"column":30,"nodeType":"96","messageId":"97","endLine":10,"endColumn":47},{"ruleId":"94","severity":1,"message":"106","line":2,"column":29,"nodeType":"96","messageId":"97","endLine":2,"endColumn":38},{"ruleId":"94","severity":1,"message":"105","line":2,"column":40,"nodeType":"96","messageId":"97","endLine":2,"endColumn":48},{"ruleId":"94","severity":1,"message":"108","line":4,"column":10,"nodeType":"96","messageId":"97","endLine":4,"endColumn":20},{"ruleId":"94","severity":1,"message":"100","line":5,"column":8,"nodeType":"96","messageId":"97","endLine":5,"endColumn":13},{"ruleId":"94","severity":1,"message":"122","line":6,"column":8,"nodeType":"96","messageId":"97","endLine":6,"endColumn":30},{"ruleId":"94","severity":1,"message":"123","line":21,"column":11,"nodeType":"96","messageId":"97","endLine":21,"endColumn":18},{"ruleId":"94","severity":1,"message":"106","line":1,"column":27,"nodeType":"96","messageId":"97","endLine":1,"endColumn":36},{"ruleId":"94","severity":1,"message":"124","line":4,"column":8,"nodeType":"96","messageId":"97","endLine":4,"endColumn":22},{"ruleId":"94","severity":1,"message":"125","line":9,"column":10,"nodeType":"96","messageId":"97","endLine":9,"endColumn":28},{"ruleId":"94","severity":1,"message":"119","line":9,"column":30,"nodeType":"96","messageId":"97","endLine":9,"endColumn":47},{"ruleId":"94","severity":1,"message":"106","line":1,"column":27,"nodeType":"96","messageId":"97","endLine":1,"endColumn":36},{"ruleId":"94","severity":1,"message":"124","line":4,"column":8,"nodeType":"96","messageId":"97","endLine":4,"endColumn":22},{"ruleId":"94","severity":1,"message":"100","line":9,"column":8,"nodeType":"96","messageId":"97","endLine":9,"endColumn":13},{"ruleId":"94","severity":1,"message":"125","line":10,"column":10,"nodeType":"96","messageId":"97","endLine":10,"endColumn":28},{"ruleId":"94","severity":1,"message":"119","line":10,"column":30,"nodeType":"96","messageId":"97","endLine":10,"endColumn":47},"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'Provider' is defined but never used.","'createStore' is defined but never used.","'axios' is defined but never used.","no-native-reassign",["126"],"no-negated-in-lhs",["127"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'io' is defined but never used.","'withStyles' is defined but never used.","'useIsMount' is assigned a value but never used.","'stockList' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'deposit'. Either include it or remove the dependency array. Mutable values like 'prevDeposit.current' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["128"],"'createTransaction' is defined but never used.","'Investing' is defined but never used.","'classes' is assigned a value but never used.","'StockSymbol' is assigned a value but never used.","'StockPriceContext' is defined but never used.","React Hook useEffect has a missing dependency: 'buyPower'. Either include it or remove the dependency array.",["129"],"'TablePaginationActions' is defined but never used.","'deposit' is assigned a value but never used.","'InputAdornment' is defined but never used.","'TransactionContext' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},"Update the dependencies array to be: [deposit]",{"range":"134","text":"135"},"Update the dependencies array to be: [shares, price, buyPower]",{"range":"136","text":"137"},[7114,7135],"[deposit]",[2432,2447],"[shares, price, buyPower]"]