[{"C:\\Users\\hieun\\stock-app\\frontend\\src\\index.js":"1","C:\\Users\\hieun\\stock-app\\frontend\\src\\App.js":"2","C:\\Users\\hieun\\stock-app\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\Layout.jsx":"4","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\StockDisplay.jsx":"5","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\BuyInputForm.jsx":"6","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\SellInputForm.jsx":"7","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\Investing.jsx":"8","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\DepositForm.jsx":"9","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\WithdrawalForm.jsx":"10","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\Title.jsx":"11","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\Chart.jsx":"12"},{"size":502,"mtime":1612162735206,"results":"13","hashOfConfig":"14"},{"size":244,"mtime":1612162627815,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":12631,"mtime":1612296219021,"results":"17","hashOfConfig":"14"},{"size":10142,"mtime":1612162656889,"results":"18","hashOfConfig":"14"},{"size":4520,"mtime":1612164104802,"results":"19","hashOfConfig":"14"},{"size":3248,"mtime":1612163407880,"results":"20","hashOfConfig":"14"},{"size":4010,"mtime":1612301739762,"results":"21","hashOfConfig":"14"},{"size":1669,"mtime":1612162333371,"results":"22","hashOfConfig":"14"},{"size":1678,"mtime":1612162680757,"results":"23","hashOfConfig":"14"},{"size":376,"mtime":1612075406133,"results":"24","hashOfConfig":"14"},{"size":2273,"mtime":1612301620845,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1izxl6t",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\hieun\\stock-app\\frontend\\src\\index.js",[],["56","57"],"C:\\Users\\hieun\\stock-app\\frontend\\src\\App.js",[],"C:\\Users\\hieun\\stock-app\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\Layout.jsx",["58","59","60","61"],"C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\StockDisplay.jsx",["62","63","64","65","66"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { TransactionContext, StockPriceContext } from './Layout';\r\nimport PropTypes from 'prop-types';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport axios from 'axios';\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.primary.light,\r\n        color: theme.palette.common.black,\r\n        borderWidth: 1,\r\n        borderColor: 'black',\r\n        borderStyle: 'solid',\r\n    },\r\n    body: {\r\n        fontSize: 14,\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n}))(TableRow);\r\n\r\n\r\n\r\nfunction createTransaction(shares, price, total, current) {\r\n    return { shares, price, total, current };\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: \"50%\"\r\n    },\r\n    tableRightBorder: {\r\n        borderWidth: 1,\r\n        borderColor: 'black',\r\n        borderStyle: 'solid',\r\n    },\r\n});\r\nconst useRowStyles = makeStyles({\r\n    root: {\r\n        '& > *': {\r\n            borderBottom: 'unset',\r\n        },\r\n    },\r\n    tableRightBorder: {\r\n        borderWidth: 1,\r\n        borderColor: 'black',\r\n        borderStyle: 'solid',\r\n    },\r\n});\r\nconst Row = (props) => {\r\n    const { row } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n    const classes = useRowStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableRow className={classes.root}>\r\n                <TableCell className={classes.tableRightBorder}>\r\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                    </IconButton>\r\n                </TableCell>\r\n                <TableCell className={classes.tableRightBorder} align=\"center\" component=\"th\" scope=\"row\">\r\n                    {row.name}\r\n                </TableCell>\r\n                <TableCell className={classes.tableRightBorder} align=\"center\">{row.shares}</TableCell>\r\n                <TableCell className={classes.tableRightBorder} align=\"center\">{row.equity}</TableCell>\r\n                <TableCell className={classes.tableRightBorder} align=\"center\">{row.totalReturn}</TableCell>\r\n                <TableCell className={classes.tableRightBorder} align=\"center\">{row.currentRowPrice}</TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <Box margin={1}>\r\n                            <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                History\r\n                            </Typography>\r\n                            <Table size=\"small\" aria-label=\"purchases\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell className={classes.tableRightBorder} align=\"center\">Date</TableCell>\r\n                                        <TableCell className={classes.tableRightBorder} align=\"center\">Shares</TableCell>\r\n                                        <TableCell className={classes.tableRightBorder} align=\"center\">Price</TableCell>\r\n                                        <TableCell className={classes.tableRightBorder} align=\"center\">Total</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {\r\n                                        !!props.history ? (props.history).map((stock) => {\r\n                                            return <TableRow key={stock[\"_id\"]}>\r\n                                                <TableCell className={classes.tableRightBorder} align=\"center\" component=\"th\" scope=\"row\">\r\n                                                    {stock[\"date\"]}\r\n                                                </TableCell>\r\n                                                <TableCell className={classes.tableRightBorder} align=\"center\">{stock[\"shares\"]}</TableCell>\r\n                                                <TableCell className={classes.tableRightBorder} align=\"center\">{stock[\"price\"]}</TableCell>\r\n                                                <TableCell className={classes.tableRightBorder} align=\"center\">\r\n                                                    {stock[\"total\"]}\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        }\r\n                                        ) : null\r\n                                    }\r\n\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Box>\r\n                    </Collapse>\r\n                </TableCell>\r\n            </TableRow>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nRow.propTypes = {\r\n    row: PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        shares: PropTypes.number.isRequired,\r\n        equity: PropTypes.number,\r\n\r\n        history: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                total: PropTypes.number,\r\n                shares: PropTypes.string,\r\n                date: PropTypes.string,\r\n            }),\r\n        ),\r\n        totalReturn: PropTypes.number,\r\n        currentPrice: PropTypes.number,\r\n    }),\r\n};\r\nconst StockDisplay = (props) => {\r\n    const classes = useStyles();\r\n    const transactions = useContext(TransactionContext).transaction;\r\n    const updatedPrice = useContext(StockPriceContext).currentPrice;\r\n    const history = useContext(TransactionContext).history;\r\n\r\n    return (\r\n        <TableContainer border={1} component={Paper}>\r\n            <Table aria-label=\"collapsible table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\"></StyledTableCell>\r\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Stock Name</StyledTableCell>\r\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Shares</StyledTableCell>\r\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Equity</StyledTableCell>\r\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Total Return</StyledTableCell>\r\n                        <StyledTableCell className={classes.tableRightBorder} align=\"center\">Current Price</StyledTableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {Object.keys(transactions).reduce((result, row) => {\r\n                        let currentRowPrice = updatedPrice[row] === undefined ? '0' : updatedPrice[row].toString()\r\n                        let shares = '0';\r\n                        let equity = '0';\r\n                        let totalReturn = '0'\r\n                        shares = (parseFloat(transactions[row][\"shares\"]).toLocaleString('en-US', { maximumFractionDigits: 7 }));\r\n                        if (shares !== undefined && currentRowPrice !== undefined) {\r\n                            equity = `$ ${(parseFloat(shares.replace(',', '')).toFixed(6) * parseFloat(currentRowPrice.replace(',', ''))).toLocaleString()}`;\r\n                        }\r\n                        totalReturn = parseFloat(parseFloat(equity.replace('$', '').replace(',', '')) - parseFloat(transactions[row][\"total\"])).toFixed(3)\r\n                        let data = {\r\n                            name: row,\r\n                            shares: shares,\r\n                            equity: equity,\r\n                            totalReturn: totalReturn,\r\n                            currentRowPrice: currentRowPrice,\r\n                            history: []\r\n                        }\r\n                        result.push(\r\n                            <Row className={classes.tableRightBorder} key={data.name} row={data} history={history[row]}>\r\n\r\n                            </Row>\r\n                        )\r\n                        // result.push(<StyledTableRow>\r\n                        //     <StyledTableCell className={classes.tableRightBorder} component=\"th\" scope=\"row\" align=\"center\">\r\n                        //         {row}\r\n                        //     </StyledTableCell>\r\n                        //     <StyledTableCell className={classes.tableRightBorder} align=\"center\">{shares}</StyledTableCell>\r\n                        //     <StyledTableCell className={classes.tableRightBorder} align=\"center\">{equity}</StyledTableCell>\r\n                        //     <StyledTableCell className={classes.tableRightBorder} align=\"center\">{totalReturn}</StyledTableCell>\r\n                        //     <StyledTableCell className={classes.tableRightBorder} align=\"center\">{currentRowPrice}</StyledTableCell>\r\n                        // </StyledTableRow>)\r\n                        return result\r\n                    }, [])}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\nexport default StockDisplay;","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\BuyInputForm.jsx",["67","68","69"],"import React, { useState, useEffect, useContext } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport axios from 'axios';\r\nimport { TransactionContext, StockPriceContext, DepositContext } from './Layout'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n}));\r\n\r\n\r\nconst BuyInputForm = (props) => {\r\n    const classes = useStyles();\r\n    const [stockName, setStockName] = useState('');\r\n    const [shares, setShares] = useState('');\r\n    const [price, setPrice] = useState('');\r\n    const [enoughMoney, setEnoughMoney] = useState(true)\r\n    const modify = useContext(TransactionContext).handleModifyingStock;\r\n    const newHistory = useContext(TransactionContext).handleModifyingHistory;\r\n    const handleStockNameChange = e => setStockName(e.target.value);\r\n    const handleSharesChange = e => setShares(e.target.value);\r\n    const handlePriceChange = e => setPrice(e.target.value);\r\n    const buyPower = useContext(DepositContext).buyPower;\r\n    const newBuyPower = useContext(DepositContext).handleBuyAndSell;\r\n    const updatedPrice = useContext(StockPriceContext).currentPrice;\r\n    const handleSubmit = async e => {\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        const API_KEY = process.env.REACT_APP_API_KEY;\r\n        const response = await axios.get(`https://finnhub.io/api/v1/quote?symbol=${stockName.toUpperCase()}&token=${API_KEY}`);\r\n        const cPrice = (response.data)[\"c\"].toString();\r\n        if (parseFloat(shares) * parseFloat(cPrice) > buyPower) {\r\n            setEnoughMoney(false);\r\n        }\r\n        else {\r\n            const data = {\r\n                \"Stock Name\": stockName.toUpperCase(),\r\n                \"Shares\": shares,\r\n                \"Price\": cPrice,\r\n                \"Total\": parseFloat(shares) * parseFloat(cPrice)\r\n            };\r\n\r\n            const history = {\r\n                \"stock\": stockName.toUpperCase(),\r\n                \"shares\": shares,\r\n                \"price\": cPrice,\r\n                \"total\": parseFloat(shares) * parseFloat(cPrice),\r\n                \"date\": new Date().toLocaleDateString()\r\n            }\r\n            await axios.post(`${process.env.REACT_APP_BACKEND_URL}addTransaction`, data)\r\n                .then((res) => {\r\n                    setStockName('');\r\n                    setPrice('');\r\n                    setShares('');\r\n                    console.log(res.data.data)\r\n                    res.data.data[\"Price\"] = parseFloat(res.data.data[\"Price\"]).toFixed(3).toString();\r\n                    res.data.data[\"Shares\"] = parseFloat(res.data.data[\"Shares\"]).toFixed(3).toString();\r\n                    modify(res.data.data, true)\r\n                });\r\n            await axios.post(`${process.env.REACT_APP_BACKEND_URL}tradeHistory`, history);\r\n            \r\n            await newHistory(history);\r\n            await newBuyPower({\r\n                \"amount\": parseFloat(buyPower) - (parseFloat(shares) * parseFloat(cPrice)),\r\n                \"date\": Date.now()\r\n            });\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (parseFloat(shares) * parseFloat(updatedPrice[stockName]) > buyPower) {\r\n            setEnoughMoney(false);\r\n        }\r\n        else {\r\n            setEnoughMoney(true);\r\n        }\r\n    }, [shares])\r\n    return (\r\n        <React.Fragment>\r\n            <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n                <FormControl>\r\n                    <InputLabel> Stock Name</InputLabel>\r\n                    <Input id=\"outlined-basic\" onChange={handleStockNameChange} value={stockName} />\r\n                </FormControl>\r\n                <FormControl>\r\n                    <InputLabel> Shares</InputLabel>\r\n                    <Input id=\"outlined-basic\" onChange={handleSharesChange} value={shares} />\r\n                </FormControl>\r\n                <Button type='submit' variant=\"contained\" color=\"primary\" error={!enoughMoney}>\r\n                    Submit\r\n                </Button>\r\n            </form>\r\n            {!enoughMoney && <Alert severity=\"error\">Buying Power is not enough</Alert>}\r\n        </React.Fragment>\r\n\r\n    );\r\n}\r\nexport default BuyInputForm","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\SellInputForm.jsx",["70","71"],"import React, { useState, useContext } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport axios from 'axios';\r\nimport { TransactionContext, StockPriceContext, DepositContext } from './Layout'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n}));\r\n\r\n\r\nconst SellInputForm = (props) => {\r\n    const classes = useStyles();\r\n    const [stockName, setStockName] = useState('');\r\n    const [shares, setShares] = useState('');\r\n    const [price, setPrice] = useState('');\r\n    const handleStockNameChange = e => setStockName(e.target.value);\r\n    const handleSharesChange = e => setShares(e.target.value);\r\n    const handlePriceChange = e => setPrice(e.target.value);\r\n    const modify = useContext(TransactionContext).handleModifyingStock;\r\n    const newHistory = useContext(TransactionContext).handleModifyingHistory;\r\n    const buyPower = useContext(DepositContext).buyPower;\r\n    const newBuyPower = useContext(DepositContext).handleBuyAndSell;\r\n    const updatedPrice = useContext(StockPriceContext).currentPrice;\r\n    const handleSubmit = async e => {\r\n        e.preventDefault()\r\n        const data = {\r\n            \"Stock Name\": stockName,\r\n            \"Shares\": shares,\r\n            \"Price\": updatedPrice[stockName],\r\n            \"Total\": parseFloat(shares) * parseFloat(updatedPrice[stockName])\r\n        };\r\n        const history = {\r\n            \"stock\": stockName.toUpperCase(),\r\n            \"shares\": shares,\r\n            \"price\": updatedPrice[stockName],\r\n            \"total\": -(parseFloat(shares) * parseFloat(updatedPrice[stockName])),\r\n            \"date\": new Date().toLocaleDateString()\r\n        }\r\n        axios.post(`${process.env.REACT_APP_BACKEND_URL}sellTransaction`, data)\r\n            .then((res) => {\r\n                setStockName('');\r\n                setPrice('');\r\n                setShares('');\r\n                modify(res.data.data)\r\n            });\r\n        await axios.post(`${process.env.REACT_APP_BACKEND_URL}tradeHistory`, history);\r\n\r\n        await newHistory(history);\r\n        newBuyPower({\r\n            \"amount\": parseFloat(buyPower) + (parseFloat(shares) * parseFloat(updatedPrice[stockName])),\r\n            \"date\": Date.now()\r\n        })\r\n    }\r\n    return (\r\n        <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n            <FormControl>\r\n                <InputLabel> Stock Name</InputLabel>\r\n                <Input id=\"outlined-basic\" onChange={handleStockNameChange} value={stockName} />\r\n            </FormControl>\r\n            <FormControl>\r\n                <InputLabel> Shares</InputLabel>\r\n                <Input id=\"outlined-basic\" onChange={handleSharesChange} value={shares} />\r\n            </FormControl>\r\n            <Button type='submit' variant=\"contained\" color=\"primary\" onSubmit={handleSubmit}>\r\n                Submit\r\n            </Button>\r\n        </form>\r\n    );\r\n}\r\nexport default SellInputForm","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\Investing.jsx",["72","73","74","75","76"],"C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\DepositForm.jsx",["77","78","79"],"import React, { useState, useEffect, useContext } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { TransactionContext, StockPriceContext, DepositContext } from './Layout'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n}));\r\n\r\nconst DepositForm = (props) => {\r\n    const classes = useStyles();\r\n    const [deposit, setDeposit] = useState('');\r\n    const newDeposit = useContext(DepositContext).handleDepositChange\r\n    const newBuyPower = useContext(DepositContext).handleBuyPowerChange\r\n    const handleDepositChange = e => setDeposit(e.target.value);\r\n    const handleSubmit = async e => {\r\n        e.preventDefault()\r\n        const data = {\r\n            \"amount\": deposit,\r\n            \"date\": Date.now()\r\n        }\r\n        setDeposit('')\r\n        newDeposit(data)\r\n        newBuyPower(data)\r\n    }\r\n    return (\r\n        <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n            <FormControl>\r\n                <InputLabel> Amount</InputLabel>\r\n                <Input id=\"outlined-basic\" onChange={handleDepositChange} value={deposit} />\r\n            </FormControl>\r\n            <Button type='submit' variant=\"contained\" color=\"primary\" onSubmit={handleSubmit}>\r\n                Submit\r\n            </Button>\r\n        </form>\r\n    );\r\n}\r\nexport default DepositForm","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\WithdrawalForm.jsx",["80","81"],"import React, { useState, useContext } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { TransactionContext, StockPriceContext, DepositContext } from './Layout'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n}));\r\n\r\n\r\nconst WithdrawalForm = (props) => {\r\n    const classes = useStyles();\r\n    const [deposit, setDeposit] = useState('');\r\n    const newDeposit = useContext(DepositContext).handleDepositChange\r\n    const newBuyPower = useContext(DepositContext).handleBuyPowerChange\r\n    const handleDepositChange = e => setDeposit(e.target.value);\r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault()\r\n        const data = {\r\n            \"amount\": -deposit,\r\n            \"date\": Date.now()\r\n        }\r\n        setDeposit('');\r\n        newDeposit(data);\r\n        newBuyPower(data);     \r\n    }\r\n    return (\r\n        <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n            <FormControl>\r\n                <InputLabel> Amount</InputLabel>\r\n                <Input id=\"outlined-basic\" onChange={handleDepositChange} value={deposit} />\r\n            </FormControl>\r\n            <Button type='submit' variant=\"contained\" color=\"primary\" onSubmit={handleSubmit}>\r\n                Submit\r\n            </Button>\r\n        </form>\r\n    );\r\n}\r\nexport default WithdrawalForm;","C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\Title.jsx",[],"C:\\Users\\hieun\\stock-app\\frontend\\src\\Components\\Chart.jsx",["82","83","84"],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":5,"column":10,"nodeType":"91","messageId":"92","endLine":5,"endColumn":20},{"ruleId":"89","severity":1,"message":"93","line":12,"column":10,"nodeType":"91","messageId":"92","endLine":12,"endColumn":15},{"ruleId":"89","severity":1,"message":"94","line":65,"column":7,"nodeType":"91","messageId":"92","endLine":65,"endColumn":17},{"ruleId":"95","severity":1,"message":"96","line":260,"column":8,"nodeType":"97","endLine":260,"endColumn":29,"suggestions":"98"},{"ruleId":"89","severity":1,"message":"99","line":1,"column":17,"nodeType":"91","messageId":"92","endLine":1,"endColumn":25},{"ruleId":"89","severity":1,"message":"100","line":1,"column":27,"nodeType":"91","messageId":"92","endLine":1,"endColumn":36},{"ruleId":"89","severity":1,"message":"101","line":18,"column":8,"nodeType":"91","messageId":"92","endLine":18,"endColumn":13},{"ruleId":"89","severity":1,"message":"102","line":32,"column":7,"nodeType":"91","messageId":"92","endLine":32,"endColumn":21},{"ruleId":"89","severity":1,"message":"103","line":42,"column":10,"nodeType":"91","messageId":"92","endLine":42,"endColumn":27},{"ruleId":"89","severity":1,"message":"104","line":26,"column":12,"nodeType":"91","messageId":"92","endLine":26,"endColumn":17},{"ruleId":"89","severity":1,"message":"105","line":32,"column":11,"nodeType":"91","messageId":"92","endLine":32,"endColumn":28},{"ruleId":"95","severity":1,"message":"106","line":86,"column":8,"nodeType":"97","endLine":86,"endColumn":16,"suggestions":"107"},{"ruleId":"89","severity":1,"message":"104","line":25,"column":12,"nodeType":"91","messageId":"92","endLine":25,"endColumn":17},{"ruleId":"89","severity":1,"message":"105","line":28,"column":11,"nodeType":"91","messageId":"92","endLine":28,"endColumn":28},{"ruleId":"89","severity":1,"message":"99","line":2,"column":40,"nodeType":"91","messageId":"92","endLine":2,"endColumn":48},{"ruleId":"89","severity":1,"message":"90","line":4,"column":10,"nodeType":"91","messageId":"92","endLine":4,"endColumn":20},{"ruleId":"89","severity":1,"message":"108","line":50,"column":11,"nodeType":"91","messageId":"92","endLine":50,"endColumn":23},{"ruleId":"95","severity":1,"message":"109","line":55,"column":8,"nodeType":"97","endLine":55,"endColumn":22,"suggestions":"110"},{"ruleId":"95","severity":1,"message":"111","line":74,"column":8,"nodeType":"97","endLine":74,"endColumn":10,"suggestions":"112"},{"ruleId":"89","severity":1,"message":"100","line":1,"column":27,"nodeType":"91","messageId":"92","endLine":1,"endColumn":36},{"ruleId":"89","severity":1,"message":"113","line":8,"column":10,"nodeType":"91","messageId":"92","endLine":8,"endColumn":28},{"ruleId":"89","severity":1,"message":"114","line":8,"column":30,"nodeType":"91","messageId":"92","endLine":8,"endColumn":47},{"ruleId":"89","severity":1,"message":"113","line":8,"column":10,"nodeType":"91","messageId":"92","endLine":8,"endColumn":28},{"ruleId":"89","severity":1,"message":"114","line":8,"column":30,"nodeType":"91","messageId":"92","endLine":8,"endColumn":47},{"ruleId":"89","severity":1,"message":"115","line":6,"column":10,"nodeType":"91","messageId":"92","endLine":6,"endColumn":16},{"ruleId":"95","severity":1,"message":"116","line":43,"column":6,"nodeType":"97","endLine":43,"endColumn":23,"suggestions":"117"},{"ruleId":"118","severity":1,"message":"119","line":68,"column":86,"nodeType":"120","endLine":68,"endColumn":102},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-unused-vars","'withStyles' is defined but never used.","Identifier","unusedVar","'Paper' is defined but never used.","'useIsMount' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'deposit'. Either include it or remove the dependency array. Mutable values like 'prevDeposit.current' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["123"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","'StyledTableRow' is assigned a value but never used.","'createTransaction' is defined but never used.","'price' is assigned a value but never used.","'handlePriceChange' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'buyPower', 'stockName', and 'updatedPrice'. Either include them or remove the dependency array.",["124"],"'getRandomInt' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'buyPower', 'totalReturn', and 'totalStockInitial'. Either include them or remove the dependency array.",["125"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["126"],"'TransactionContext' is defined but never used.","'StockPriceContext' is defined but never used.","'create' is defined but never used.","React Hook useEffect has a missing dependency: 'chartData.length'. Either include it or remove the dependency array.",["127"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},"Update the dependencies array to be: [deposit]",{"range":"138","text":"139"},"Update the dependencies array to be: [buyPower, shares, stockName, updatedPrice]",{"range":"140","text":"141"},"Update the dependencies array to be: [buyPower, totalReturn, totalStockInitial, updatedPrice]",{"range":"142","text":"143"},"Update the dependencies array to be: [props]",{"range":"144","text":"145"},"Update the dependencies array to be: [chartData.length, props.chartData]",{"range":"146","text":"147"},[9045,9066],"[deposit]",[3604,3612],"[buyPower, shares, stockName, updatedPrice]",[2345,2359],"[buyPower, totalReturn, totalStockInitial, updatedPrice]",[3023,3025],"[props]",[1248,1265],"[chartData.length, props.chartData]"]